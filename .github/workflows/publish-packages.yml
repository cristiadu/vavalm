name: Publish Packages to GitHub Packages

on:
  push:
    branches:
      - main

jobs:
  version-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'pnpm'
          cache-dependency-path: "pnpm-lock.yaml"
      
      - name: Install Dependencies
        run: pnpm install
      
      - name: Build All
        run: pnpm build
      
      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Setup .npmrc file
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          cat ~/.npmrc
      
      # Create a release PR or publish directly based on changesets
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm version-packages
          publish: pnpm release
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # This step will run if any version changes were made
      - name: Check for root package versioning
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          # Check if any packages were versioned
          VERSIONED=$(git diff --name-only | grep package.json)
          if [ -n "$VERSIONED" ]; then
            echo "Packages were versioned, ensuring root package is updated"
            
            # Extract the highest version from api and ui packages
            API_VERSION=$(cat api/package.json | jq -r '.version')
            UI_VERSION=$(cat ui/package.json | jq -r '.version')
            
            # Use the highest version for the root package
            if [ $(echo "$API_VERSION $UI_VERSION" | tr ' ' '\n' | sort -V | tail -n 1) = "$API_VERSION" ]; then
              NEW_VERSION=$API_VERSION
            else
              NEW_VERSION=$UI_VERSION
            fi
            
            # Update the root package.json version
            jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp
            mv package.json.tmp package.json
            
            # Commit the changes
            git add package.json
            git commit -m "chore: update root package version to $NEW_VERSION"
            git push
          else
            echo "No packages were versioned, skipping root package update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      