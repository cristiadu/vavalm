name: Publish Packages to GitHub Packages

on:
  push:
    branches:
      - main

jobs:
  version-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'pnpm'
          cache-dependency-path: "pnpm-lock.yaml"
      
      - name: Install Dependencies
        run: pnpm install
      
      - name: Build All
        run: pnpm build
      
      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Setup .npmrc file
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          cat ~/.npmrc
      
      # Create a release PR or publish directly based on changesets
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm version-packages
          publish: pnpm release
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # This step will run if any version changes were made
      - name: Check for root package versioning
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          # Install jq if not present
          command -v jq >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y jq; }
          
          # Debug information
          echo "Current directory: $(pwd)"
          ls -la
          echo "API package exists: $(test -f api/package.json && echo 'Yes' || echo 'No')"
          echo "UI package exists: $(test -f ui/package.json && echo 'Yes' || echo 'No')"
          
          # Verify package.json files exist and are readable
          if [ ! -f "api/package.json" ] || [ ! -f "ui/package.json" ] || [ ! -f "package.json" ]; then
            echo "Error: One or more package.json files not found"
            exit 1
          fi
          
          # Print package versions for debugging
          echo "Current API version: $(cat api/package.json | grep version)"
          echo "Current UI version: $(cat ui/package.json | grep version)"
          echo "Current root version: $(cat package.json | grep version)"
          
          # Extract versions safely
          API_VERSION=$(jq -r '.version' api/package.json)
          UI_VERSION=$(jq -r '.version' ui/package.json)
          
          echo "API version: $API_VERSION"
          echo "UI version: $UI_VERSION"
          
          # Verify versions were extracted
          if [ -z "$API_VERSION" ] || [ -z "$UI_VERSION" ]; then
            echo "Error: Failed to extract version information"
            exit 1
          fi
          
          # Determine the highest version
          NEW_VERSION=$(echo -e "$API_VERSION\n$UI_VERSION" | sort -V | tail -n 1)
          echo "Highest version: $NEW_VERSION"
          
          # Update the root package version
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Verify the update worked
          UPDATED_VERSION=$(jq -r '.version' package.json)
          echo "Updated root version: $UPDATED_VERSION"
          
          # Commit the changes
          git add package.json
          git commit -m "chore: update root package version to $NEW_VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      