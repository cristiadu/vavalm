[1mdiff --git a/ui/app/api/GameApi.ts b/ui/app/api/GameApi.ts[m
[1mindex 709884e..08317cc 100644[m
[1m--- a/ui/app/api/GameApi.ts[m
[1m+++ b/ui/app/api/GameApi.ts[m
[36m@@ -17,16 +17,16 @@[m [mexport const playFullGame = async ([m
     )[m
 [m
     if (!response.ok) {[m
[31m-      console.error("Network response was not ok: ", response)[m
[31m-      return[m
[32m+[m[32m      throw new Error(`Network response was not ok: ${response.statusText}`)[m
     }[m
 [m
     const data = await response.json()[m
[31m-    closure(data as { message: string })[m
[32m+[m[32m    closure(data)[m
     console.debug("Success:", data)[m
[31m-    return data as { message: string }[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error("Error:", error)[m
[32m+[m[32m    throw error[m
   }[m
 }[m
 [m
[36m@@ -43,8 +43,7 @@[m [mexport const getMatch = async (match_id: number, closure: (response: Match) => v[m
     )[m
 [m
     if (!response.ok) {[m
[31m-      console.error("Network response was not ok: ", response)[m
[31m-      return[m
[32m+[m[32m      throw new Error(`Network response was not ok: ${response.statusText}`)[m
     }[m
 [m
     const data = await response.json()[m
[36m@@ -63,11 +62,12 @@[m [mexport const getMatch = async (match_id: number, closure: (response: Match) => v[m
       )[m
     }[m
 [m
[31m-    closure(data as Match)[m
[32m+[m[32m    closure(data)[m
     console.debug("Success:", data)[m
[31m-    return data as Match[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error("Error:", error)[m
[32m+[m[32m    throw error[m
   }[m
 }[m
 [m
[36m@@ -81,8 +81,7 @@[m [mexport const getGame = async (game_id: number, closure: (response: Game) => void[m
     })[m
 [m
     if (!response.ok) {[m
[31m-      console.error("Network response was not ok: ", response)[m
[31m-      return[m
[32m+[m[32m      throw new Error(`Network response was not ok: ${response.statusText}`)[m
     }[m
 [m
     const data = await response.json()[m
[36m@@ -101,10 +100,11 @@[m [mexport const getGame = async (game_id: number, closure: (response: Game) => void[m
       )[m
     }[m
 [m
[31m-    closure(data as Game)[m
[32m+[m[32m    closure(data)[m
     console.debug("Success:", data)[m
[31m-    return data as Game[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error("Error:", error)[m
[32m+[m[32m    throw error[m
   }[m
 }[m
[1mdiff --git a/ui/app/api/PlayersApi.ts b/ui/app/api/PlayersApi.ts[m
[1mindex 7801664..e3aa762 100644[m
[1m--- a/ui/app/api/PlayersApi.ts[m
[1m+++ b/ui/app/api/PlayersApi.ts[m
[36m@@ -5,36 +5,36 @@[m [mimport { ItemsWithPagination } from "./models/types"[m
 export const fetchPlayersStats = async (closure: (playerData: ItemsWithPagination<AllPlayerStats>) => void, limit: number = LIMIT_PER_PAGE_INITIAL_VALUE, offset: number = PAGE_OFFSET_INITIAL_VALUE) => {[m
   const response = await fetch(`${getApiBaseUrl()}/players/stats?limit=${limit}&offset=${offset}`)[m
   const data = await response.json()[m
[31m-  closure(data as ItemsWithPagination<AllPlayerStats>)[m
[31m-  return data as ItemsWithPagination<AllPlayerStats>[m
[32m+[m[32m  closure(data)[m
[32m+[m[32m  return data[m
 }[m
 [m
 export const fetchPlayersByTeam = async (teamId: number, closure: (playerData: Player[]) => void) => {[m
   const response = await fetch(`${getApiBaseUrl()}/teams/${teamId}/players`)[m
   const data = await response.json()[m
   closure(data)[m
[31m-  return data as Player[][m
[32m+[m[32m  return data[m
 }[m
 [m
 export const fetchPlayers = async (closure: (playerData: ItemsWithPagination<Player>) => void, limit: number = LIMIT_PER_PAGE_INITIAL_VALUE, offset: number = PAGE_OFFSET_INITIAL_VALUE) => {[m
   const response = await fetch(`${getApiBaseUrl()}/players?limit=${limit}&offset=${offset}`)[m
   const data = await response.json()[m
[31m-  closure(data as ItemsWithPagination<Player>)[m
[31m-  return data as ItemsWithPagination<Player>[m
[32m+[m[32m  closure(data)[m
[32m+[m[32m  return data[m
 }[m
 [m
 export const fetchPlayer = async (playerId: number, closure: (playerData: Player) => void) => {[m
   const response = await fetch(`${getApiBaseUrl()}/players/${playerId}`)[m
   const data = await response.json()[m
   closure(data)[m
[31m-  return data as Player[m
[32m+[m[32m  return data[m
 }[m
 [m
 export const fetchPlayerStats = async (playerId: number, closure: (playerData: AllPlayerStats) => void) => {[m
   const response = await fetch(`${getApiBaseUrl()}/players/${playerId}/stats`)[m
   const data = await response.json()[m
[31m-  closure(data as AllPlayerStats)[m
[31m-  return data as AllPlayerStats[m
[32m+[m[32m  closure(data)[m
[32m+[m[32m  return data[m
 }[m
 [m
 export const newPlayer = async (player: Player, closure: (playerData: Player) => void) => {[m
[36m@@ -55,7 +55,7 @@[m [mexport const newPlayer = async (player: Player, closure: (playerData: Player) =>[m
     const result = await response.json()[m
     closure(result)[m
     console.debug('Success:', result)[m
[31m-    return result as Player[m
[32m+[m[32m    return result[m
   } catch (error) {[m
     console.error('Error:', error)[m
   }[m
[36m@@ -79,7 +79,7 @@[m [mexport const editPlayer = async (player: Player, closure: (playerData: Player) =[m
     const result = await response.json()[m
     closure(result)[m
     console.debug('Success:', result)[m
[31m-    return result as Player[m
[32m+[m[32m    return result[m
   } catch (error) {[m
     console.error('Error:', error)[m
   }[m
[1mdiff --git a/ui/app/api/TeamsApi.ts b/ui/app/api/TeamsApi.ts[m
[1mindex 5642601..386ea28 100644[m
[1m--- a/ui/app/api/TeamsApi.ts[m
[1m+++ b/ui/app/api/TeamsApi.ts[m
[36m@@ -3,7 +3,6 @@[m [mimport { ItemsWithPagination } from "./models/types"[m
 import { Team, TeamStats } from "./models/Team"[m
 [m
 export const fetchAllTeams = async (closure: (teamData: Team[]) => void) => {[m
[31m-  // Fetch all team pages[m
   const response = await fetch(`${getApiBaseUrl()}/teams`)[m
   const data = await response.json()[m
   // Convert Buffer to Blob[m
[36m@@ -14,8 +13,8 @@[m [mexport const fetchAllTeams = async (closure: (teamData: Team[]) => void) => {[m
     }[m
     return team[m
   })[m
[31m-  closure(teamsWithBlob as Team[])[m
[31m-  return teamsWithBlob as Team[][m
[32m+[m[32m  closure(teamsWithBlob)[m
[32m+[m[32m  return teamsWithBlob[m
 }[m
 [m
 export const fetchTeams = async (closure: (teamData: ItemsWithPagination<Team>) => void, limit: number = LIMIT_PER_PAGE_INITIAL_VALUE, offset: number = PAGE_OFFSET_INITIAL_VALUE) => {[m
[36m@@ -29,8 +28,9 @@[m [mexport const fetchTeams = async (closure: (teamData: ItemsWithPagination<Team>)[m
     }[m
     return team[m
   })[m
[31m-  closure({ total: data.total, items: teamsWithBlob } as ItemsWithPagination<Team>)[m
[31m-  return { total: data.total, items: teamsWithBlob } as ItemsWithPagination<Team>[m
[32m+[m[32m  const result = { total: data.total, items: teamsWithBlob }[m
[32m+[m[32m  closure(result)[m
[32m+[m[32m  return result[m
 }[m
 [m
 export const fetchTeamsStats = async (closure: (teamData: ItemsWithPagination<TeamStats>) => void, limit: number = LIMIT_PER_PAGE_INITIAL_VALUE, offset: number = PAGE_OFFSET_INITIAL_VALUE) => {[m
[36m@@ -43,8 +43,9 @@[m [mexport const fetchTeamsStats = async (closure: (teamData: ItemsWithPagination<Te[m
     }[m
     return team[m
   })[m
[31m-  closure({ total: data.total, items: teamsWithBlob } as ItemsWithPagination<TeamStats>)[m
[31m-  return { total: data.total, items: teamsWithBlob } as ItemsWithPagination<TeamStats>[m
[32m+[m[32m  const result = { total: data.total, items: teamsWithBlob }[m
[32m+[m[32m  closure(result)[m
[32m+[m[32m  return result[m
 }[m
 [m
 export const fetchTeam = async (teamId: number, closure: (teamData: Team) => void) => {[m
[36m@@ -53,8 +54,9 @@[m [mexport const fetchTeam = async (teamId: number, closure: (teamData: Team) => voi[m
   // Convert Buffer to Blob[m
   if (data.logo_image_file) {[m
     const blob = new Blob([new Uint8Array(data.logo_image_file.data)], { type: 'image/png' })[m
[31m-    closure({ ...data, logo_image_file: blob })[m
[31m-    return { ...data, logo_image_file: blob } as Team[m
[32m+[m[32m    const result = { ...data, logo_image_file: blob }[m
[32m+[m[32m    closure(result)[m
[32m+[m[32m    return result[m
   } else {[m
     closure(data)[m
     return data[m
[36m@@ -67,8 +69,9 @@[m [mexport const fetchTeamStats = async (teamId: number, closure: (teamData: TeamSta[m
   // Convert Buffer to Blob[m
   if (data.team.logo_image_file) {[m
     const blob = new Blob([new Uint8Array(data.team.logo_image_file.data)], { type: 'image/png' })[m
[31m-    closure({ ...data, team: { ...data.team, logo_image_file: blob } })[m
[31m-    return { ...data, team: { ...data.team, logo_image_file: blob } } as TeamStats[m
[32m+[m[32m    const result = { ...data, team: { ...data.team, logo_image_file: blob } }[m
[32m+[m[32m    closure(result)[m
[32m+[m[32m    return result[m
   } else {[m
     closure(data)[m
     return data[m
[36m@@ -100,7 +103,7 @@[m [mexport const newTeam = async (team: Team, closure: (teamData: Team) => void) =>[m
     const result = await response.json()[m
     closure(result)[m
     console.debug('Success:', result)[m
[31m-    return result as Team[m
[32m+[m[32m    return result[m
   } catch (error) {[m
     console.error('Error:', error)[m
   }[m
[36m@@ -131,7 +134,7 @@[m [mexport const editTeam = async (team: Team, closure: (teamData: Team) => void) =>[m
     const result = await response.json()[m
     closure(result)[m
     console.debug('Success:', result)[m
[31m-    return result as Team[m
[32m+[m[32m    return result[m
   } catch (error) {[m
     console.error('Error:', error)[m
   }[m
[1mdiff --git a/ui/app/api/TournamentsApi.ts b/ui/app/api/TournamentsApi.ts[m
[1mindex dbc662d..3c737c4 100644[m
[1m--- a/ui/app/api/TournamentsApi.ts[m
[1m+++ b/ui/app/api/TournamentsApi.ts[m
[36m@@ -16,19 +16,19 @@[m [mexport const fetchTournaments = async (closure: (tournamentData: ItemsWithPagina[m
     })[m
     return { ...tournament, teams: teamsWithBlob }[m
   })[m
[31m-  closure({ total: data.total, items: tournamentwithBlob } as ItemsWithPagination<Tournament>)[m
[31m-  return { total: data.total, items: tournamentwithBlob } as ItemsWithPagination<Tournament>[m
[32m+[m[32m  const result = { total: data.total, items: tournamentwithBlob }[m
[32m+[m[32m  closure(result)[m
[32m+[m[32m  return result[m
 }[m
 [m
 export const fetchTournamentMatchSchedule = async (tournamentId: number, closure: (matchData: ItemsWithPagination<Match>) => void, limit: number = LIMIT_PER_PAGE_INITIAL_VALUE, offset: number = PAGE_OFFSET_INITIAL_VALUE) => {[m
   const response = await fetch(`${getApiBaseUrl()}/tournaments/${tournamentId}/schedule?limit=${limit}&offset=${offset}`)[m
   const data = await response.json()[m
[31m-  closure(data as ItemsWithPagination<Match>)[m
[31m-  return data as ItemsWithPagination<Match>[m
[32m+[m[32m  closure(data)[m
[32m+[m[32m  return data[m
 }[m
 [m
 export const getTournament = async (tournamentId: number, closure: (tournamentData: Tournament) => void) => {[m
[31m-  // Limit here is for the number of matches to fetch[m
   const response = await fetch(`${getApiBaseUrl()}/tournaments/${tournamentId}`)[m
   const data = await response.json()[m
   // Convert Buffer to Blob for team logos[m
[36m@@ -45,8 +45,9 @@[m [mexport const getTournament = async (tournamentId: number, closure: (tournamentDa[m
     return { ...standing, team: standingsTeam }[m
   })[m
 [m
[31m-  closure({...data, teams: teamsWithBlob, standings: standingsWithTeamsRef } as Tournament) [m
[31m-  return {...data, teams: teamsWithBlob, standings: standingsWithTeamsRef } as Tournament[m
[32m+[m[32m  const result = { ...data, teams: teamsWithBlob, standings: standingsWithTeamsRef }[m
[32m+[m[32m  closure(result)[m
[32m+[m[32m  return result[m
 }[m
 [m
 export const newTournament = async (tournament: Tournament, closure: (tournamentData: Tournament) => void) => {[m
[36m@@ -65,9 +66,9 @@[m [mexport const newTournament = async (tournament: Tournament, closure: (tournament[m
     }[m
 [m
     const data = await response.json()[m
[31m-    closure(data as Tournament)[m
[32m+[m[32m    closure(data)[m
     console.debug('Success:', data)[m
[31m-    return data as Tournament[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error('Error creating tournament:', error)[m
   }[m
[36m@@ -89,9 +90,9 @@[m [mexport const editTournament = async (tournament: Tournament, closure: (tournamen[m
     }[m
 [m
     const data = await response.json()[m
[31m-    closure(data as Tournament)[m
[32m+[m[32m    closure(data)[m
     console.debug('Success:', data)[m
[31m-    return data as Tournament[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error('Error updating tournament:', error)[m
   }[m
[36m@@ -115,7 +116,7 @@[m [mexport const deleteTournament = async (tournament: Tournament, closure: ({messag[m
     const data = await response.json()[m
     closure(data)[m
     console.debug('Success:', data)[m
[31m-    return data as Tournament[m
[32m+[m[32m    return data[m
   } catch (error) {[m
     console.error('Error deleting tournament:', error)[m
   }[m
[1mdiff --git a/ui/app/api/models/constants.ts b/ui/app/api/models/constants.ts[m
[1mindex 702e0d3..1b615a7 100644[m
[1m--- a/ui/app/api/models/constants.ts[m
[1m+++ b/ui/app/api/models/constants.ts[m
[36m@@ -2,5 +2,5 @@[m [mexport const LIMIT_PER_PAGE_INITIAL_VALUE: number = 10[m
 export const PAGE_OFFSET_INITIAL_VALUE: number = 0[m
 [m
 export const getApiBaseUrl = () => {[m
[31m-  return process.env.API_BASE_URL || 'http://localhost:8000'[m
[32m+[m[32m  return process.env.API_BASE_URL || 'https://turbo-waffle-g49vvx5wrxx25v7-8000.app.github.dev/'[m
 }[m
